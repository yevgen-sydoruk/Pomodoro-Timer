{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yevgen\\\\Desktop\\\\pomodoro\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusDurationControl from \"../utils/PomodoroComponents/FocusDurationControl\";\nimport BreakDurationControl from \"../utils/PomodoroComponents/BreakDurationControl\";\nimport SessionShowcase from \"../utils/PomodoroComponents/SessionShowcase\";\nimport TimerControl from \"../utils/PomodoroComponents/TimerControl\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n\n  const toggleTimerRunning = value => setIsTimerRunning(value); // The current session - null where there is no session running\n\n\n  const [session, setSession] = useState(null);\n\n  const toggleSession = value => setSession(value); // ToDo: Allow the user to adjust the focus and break duration.\n\n\n  const [focusDuration, setFocusDuration] = useState(25);\n\n  const switchFocusDuration = value => setFocusDuration(value);\n\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  const switchBreakDuration = value => setBreakDuration(value);\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if ((session === null || session === void 0 ? void 0 : session.timeRemaining) === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FocusDurationControl, {\n    focusDuration: focusDuration,\n    handleFocusDurationClick: switchFocusDuration,\n    session: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(BreakDurationControl, {\n    breakDuration: breakDuration,\n    handleBreakDurationClick: switchBreakDuration,\n    session: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(TimerControl, {\n    playPause: playPause,\n    isTimerRunning: isTimerRunning,\n    session: session,\n    handleSessionClick: toggleSession,\n    handleTimerRunningClick: toggleTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(SessionShowcase, {\n    session: session,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/Yevgen/Desktop/pomodoro/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","FocusDurationControl","BreakDurationControl","SessionShowcase","TimerControl","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","toggleTimerRunning","value","session","setSession","toggleSession","setFocusDuration","switchFocusDuration","setBreakDuration","switchBreakDuration","Audio","play","playPause","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusDurationControl from \"../utils/PomodoroComponents/FocusDurationControl\";\nimport BreakDurationControl from \"../utils/PomodoroComponents/BreakDurationControl\";\nimport SessionShowcase from \"../utils/PomodoroComponents/SessionShowcase\";\nimport TimerControl from \"../utils/PomodoroComponents/TimerControl\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n    const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n    return {\n        ...prevState,\n        timeRemaining,\n    };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n    /**\n     * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n     */\n    return (currentSession) => {\n        if (currentSession.label === \"Focusing\") {\n            return {\n                label: \"On Break\",\n                timeRemaining: breakDuration * 60,\n            };\n        }\n        return {\n            label: \"Focusing\",\n            timeRemaining: focusDuration * 60,\n        };\n    };\n}\n\nfunction Pomodoro() {\n    // Timer starts out paused\n    const [isTimerRunning, setIsTimerRunning] = useState(false);\n    const toggleTimerRunning = (value) => setIsTimerRunning(value);\n    // The current session - null where there is no session running\n    const [session, setSession] = useState(null);\n    const toggleSession = (value) => setSession(value);\n\n    // ToDo: Allow the user to adjust the focus and break duration.\n    const [focusDuration, setFocusDuration] = useState(25);\n    const switchFocusDuration = (value) => setFocusDuration(value);\n\n    const [breakDuration, setBreakDuration] = useState(5);\n    const switchBreakDuration = (value) => setBreakDuration(value);\n\n    /**\n     * Custom hook that invokes the callback function every second\n     *\n     * NOTE: You will not need to make changes to the callback function\n     */\n    useInterval(\n        () => {\n            if (session?.timeRemaining === 0) {\n                new Audio(\n                    \"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\"\n                ).play();\n                return setSession(nextSession(focusDuration, breakDuration));\n            }\n            return setSession(nextTick);\n        },\n        isTimerRunning ? 1000 : null\n    );\n\n    /**\n     * Called whenever the play/pause button is clicked.\n     */\n    function playPause() {\n        setIsTimerRunning((prevState) => {\n            const nextState = !prevState;\n            if (nextState) {\n                setSession((prevStateSession) => {\n                    // If the timer is starting and the previous session is null,\n                    // start a focusing session.\n                    if (prevStateSession === null) {\n                        return {\n                            label: \"Focusing\",\n                            timeRemaining: focusDuration * 60,\n                        };\n                    }\n                    return prevStateSession;\n                });\n            }\n            return nextState;\n        });\n    }\n\n    return (\n        <div className=\"pomodoro\">\n            <div className=\"row\">\n                <FocusDurationControl\n                    focusDuration={focusDuration}\n                    handleFocusDurationClick={switchFocusDuration}\n                    session={session}\n                />\n                <BreakDurationControl\n                    breakDuration={breakDuration}\n                    handleBreakDurationClick={switchBreakDuration}\n                    session={session}\n                />\n            </div>\n            <TimerControl\n                playPause={playPause}\n                isTimerRunning={isTimerRunning}\n                session={session}\n                handleSessionClick={toggleSession}\n                handleTimerRunningClick={toggleTimerRunning}\n            />\n            <SessionShowcase\n                session={session}\n                focusDuration={focusDuration}\n                breakDuration={breakDuration}\n            />\n        </div>\n    );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}