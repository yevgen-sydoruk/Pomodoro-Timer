{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yevgen\\\\Desktop\\\\pomodoro\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport FocusDurationControl from \"../utils/PomodoroComponents/FocusDurationControl\";\nimport BreakDurationControl from \"../utils/PomodoroComponents/FocusDurationControl\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n\n  const switchFocusDuration = value => setFocusDuration(value);\n\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  const switchBreakDuration = value => setBreakDuration(value);\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if ((session === null || session === void 0 ? void 0 : session.timeRemaining) === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FocusDurationControl, {\n    focusDuration: focusDuration,\n    handleFocusDurationClick: switchFocusDuration,\n    session: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(BreakDurationControl, {\n    breakDuration: breakDuration,\n    handleBreakDurationClick: switchFocusDuration,\n    session: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !isTimerRunning,\n      \"oi-media-pause\": isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    \"data-testid\": \"stop\",\n    title: \"Stop the session\",\n    onClick: () => {\n      setIsTimerRunning(false);\n      setSession(null);\n    },\n    disabled: !session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 29\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, session && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 33\n    }\n  }, session === null || session === void 0 ? void 0 : session.label, \" for\", \" \", (session === null || session === void 0 ? void 0 : session.label) === \"Focusing\" ? minutesToDuration(focusDuration) : minutesToDuration(breakDuration), \" \", \"minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 33\n    }\n  }, secondsToDuration(session === null || session === void 0 ? void 0 : session.timeRemaining), \" \", \"remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": `${(1 - session.timeRemaining / (((session === null || session === void 0 ? void 0 : session.label) === \"Focusing\" ? focusDuration : breakDuration) * 60)) * 100}` // TODO: Increase aria-valuenow as elapsed time increases DONE\n    ,\n    style: {\n      width: `${(1 - session.timeRemaining / (((session === null || session === void 0 ? void 0 : session.label) === \"Focusing\" ? focusDuration : breakDuration) * 60)) * 100}%`\n    } // TODO: Increase width % as elapsed time increases DONE\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 37\n    }\n  })))))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/Yevgen/Desktop/pomodoro/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","minutesToDuration","secondsToDuration","FocusDurationControl","BreakDurationControl","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","switchFocusDuration","value","setBreakDuration","switchBreakDuration","Audio","play","playPause","nextState","prevStateSession","oi","height","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport FocusDurationControl from \"../utils/PomodoroComponents/FocusDurationControl\";\nimport BreakDurationControl from \"../utils/PomodoroComponents/FocusDurationControl\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n    const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n    return {\n        ...prevState,\n        timeRemaining,\n    };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n    /**\n     * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n     */\n    return (currentSession) => {\n        if (currentSession.label === \"Focusing\") {\n            return {\n                label: \"On Break\",\n                timeRemaining: breakDuration * 60,\n            };\n        }\n        return {\n            label: \"Focusing\",\n            timeRemaining: focusDuration * 60,\n        };\n    };\n}\n\nfunction Pomodoro() {\n    // Timer starts out paused\n    const [isTimerRunning, setIsTimerRunning] = useState(false);\n    // The current session - null where there is no session running\n    const [session, setSession] = useState(null);\n\n    // ToDo: Allow the user to adjust the focus and break duration.\n    const [focusDuration, setFocusDuration] = useState(25);\n    const switchFocusDuration = (value) => setFocusDuration(value);\n\n    const [breakDuration, setBreakDuration] = useState(5);\n    const switchBreakDuration = (value) => setBreakDuration(value);\n\n    /**\n     * Custom hook that invokes the callback function every second\n     *\n     * NOTE: You will not need to make changes to the callback function\n     */\n    useInterval(\n        () => {\n            if (session?.timeRemaining === 0) {\n                new Audio(\n                    \"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\"\n                ).play();\n                return setSession(nextSession(focusDuration, breakDuration));\n            }\n            return setSession(nextTick);\n        },\n        isTimerRunning ? 1000 : null\n    );\n\n    /**\n     * Called whenever the play/pause button is clicked.\n     */\n    function playPause() {\n        setIsTimerRunning((prevState) => {\n            const nextState = !prevState;\n            if (nextState) {\n                setSession((prevStateSession) => {\n                    // If the timer is starting and the previous session is null,\n                    // start a focusing session.\n                    if (prevStateSession === null) {\n                        return {\n                            label: \"Focusing\",\n                            timeRemaining: focusDuration * 60,\n                        };\n                    }\n                    return prevStateSession;\n                });\n            }\n            return nextState;\n        });\n    }\n\n    return (\n        <div className=\"pomodoro\">\n            <div className=\"row\">\n                <div className=\"col\">\n                    <FocusDurationControl\n                        focusDuration={focusDuration}\n                        handleFocusDurationClick={switchFocusDuration}\n                        session={session}\n                    />\n                </div>\n                <div className=\"col\">\n                    <BreakDurationControl\n                        breakDuration={breakDuration}\n                        handleBreakDurationClick={switchFocusDuration}\n                        session={session}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div\n                        className=\"btn-group btn-group-lg mb-2\"\n                        role=\"group\"\n                        aria-label=\"Timer controls\"\n                    >\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-primary\"\n                            data-testid=\"play-pause\"\n                            title=\"Start or pause timer\"\n                            onClick={playPause}\n                        >\n                            <span\n                                className={classNames({\n                                    oi: true,\n                                    \"oi-media-play\": !isTimerRunning,\n                                    \"oi-media-pause\": isTimerRunning,\n                                })}\n                            />\n                        </button>\n                        {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session*/}\n                        {/* TODO: Disable the stop button when there is no active session DONE*/}\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-secondary\"\n                            data-testid=\"stop\"\n                            title=\"Stop the session\"\n                            onClick={() => {\n                                setIsTimerRunning(false);\n                                setSession(null);\n                            }}\n                            disabled={!session}\n                        >\n                            <span className=\"oi oi-media-stop\" />\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div>\n                {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused DONE*/}\n\n                {session && (\n                    <>\n                        <div className=\"row mb-2\">\n                            <div className=\"col\">\n                                {/* TODO: Update message below to include current session (Focusing or On Break) total duration DONE*/}\n                                <h2 data-testid=\"session-title\">\n                                    {session?.label} for{\" \"}\n                                    {session?.label === \"Focusing\"\n                                        ? minutesToDuration(focusDuration)\n                                        : minutesToDuration(breakDuration)}{\" \"}\n                                    minutes\n                                </h2>\n                                {/* TODO: Update message below correctly format the time remaining in the current session  DONE*/}\n                                <p\n                                    className=\"lead\"\n                                    data-testid=\"session-sub-title\"\n                                >\n                                    {secondsToDuration(session?.timeRemaining)}{\" \"}\n                                    remaining\n                                </p>\n                            </div>\n                        </div>\n                        <div className=\"row mb-2\">\n                            <div className=\"col\">\n                                <div\n                                    className=\"progress\"\n                                    style={{ height: \"20px\" }}\n                                >\n                                    <div\n                                        className=\"progress-bar\"\n                                        role=\"progressbar\"\n                                        aria-valuemin=\"0\"\n                                        aria-valuemax=\"100\"\n                                        aria-valuenow={`${\n                                            (1 -\n                                                session.timeRemaining /\n                                                    ((session?.label ===\n                                                    \"Focusing\"\n                                                        ? focusDuration\n                                                        : breakDuration) *\n                                                        60)) *\n                                            100\n                                        }`} // TODO: Increase aria-valuenow as elapsed time increases DONE\n                                        style={{\n                                            width: `${\n                                                (1 -\n                                                    session.timeRemaining /\n                                                        ((session?.label ===\n                                                        \"Focusing\"\n                                                            ? focusDuration\n                                                            : breakDuration) *\n                                                            60)) *\n                                                100\n                                            }%`,\n                                        }} // TODO: Increase width % as elapsed time increases DONE\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}